<template>
    <view class="video-player">
        <nvue-navbar title="视频播放" :showRightIcon="false" v-if="!pipStatus"></nvue-navbar>
        <view class="video-player-container" :style="{ height: videoHeight, flex: `0 0 ${videoHeight}` }">
            <view :style="{ width: '750rpx', height: videoHeight, background: '#000', position: 'relative' }"
                v-if="plateForm == 'android' && uniPlatform == 'app'">
                <video-view :initialTime="config.initialTime" :bottomButton="routerParams.type == 'tv'"
                    :title="config.title" :url="config.url" :showProgress="settingData.showProgress"
                    :showPre="this.historyObj.ji > 1" :showNext="this.historyObj.ji < tvList.length"
                    :initialFullScreen="false" @timeupdate="setHistory" @getpipstatus="getPipStatus" @pause="pauseVideo"
                    @prev="prevVideo" @next="nextVideo" @getorientation="getOrientation" @ontv="castTv"
                    :style="{ width: '750rpx', height: videoHeight }" ref="video_view">
                </video-view>
                <tv-button v-if="showTvButton" :style="{ width: '750rpx', height: videoHeight }"
                    @setTvButton="setTvButton" @changeTv="castTv"></tv-button>
            </view>
            <view v-else>
                <video :src="config.url" :title="config.title" :autoplay="config.autoplay" :loop="config.loop"
                    :initial-time="config.initialTime" :is-live="config.isLive" :muted="config.muted"
                    :codec="config.codec" :play-strategy="config.playStrategy" style="width:750rpx;height:580rpx"
                    @timeupdate="setHistory" @pause="pauseVideo" v-if="config.url && !showReload">
                </video>
                <button class="video-button" v-if="showReload" @click="reloadVideo">
                    <text style="color:#fff">重新加载</text>
                </button>
            </view>
        </view>
        <player-detail :movieTvId="historyObj.movieTvId" :showRehandleButton="showRehandleButton"
            :seasonData="seasonData" :direction="direction" :type="routerParams.type" :tvListData="tvList"
            :path="historyObj.path" @changeVideo="changeVideo" @resetTv="resetTv" v-if="routerParams.noSetHistory != 0">
        </player-detail>
        <tv-select ref="tv_select" :videoUrl="config.url" :initialTime="historyObj.initialTime"
            @setTvButton="setTvButton" @playOrPause="playOrPauseVideo"></tv-select>
    </view>
</template>

<script>
import NvueNavbar from "@/components/mobile/wil-navbar/navbar.nvue";
import playerDetail from "../components/player-component/detail.nvue";
import tvSelect from "../components/player-component/tv-select.nvue";
import tvButton from "../components/player-component/tv-button.nvue";
import { addOperLog } from "@/network/apis";
import { getWebDAVUrl, get189VideoUrl, loginUser, getQuarkResolutionUrl, getQuarkVideoUrl, getFolder, getTvSeason, get189Folder, getQuarkFolder } from "@/utils/common";
import { calTime, handleSeasonName, generateChineseNumberMapping } from "@/utils/scrape";
import { getEmbyPlayerUrl, setHistoryPlay } from '@/utils/emby'
import { IMG_DOMAIN } from "@/utils/config";

export default {
    components: {
        NvueNavbar,
        playerDetail,
        tvSelect,
        tvButton,
    },
    data() {
        return {
            historyPlay: [],
            historyObj: {
                initialTime: "0",
                PlaybackStartTimeTicks:0
            },
            sum: 0,
            routerParams: {},
            showReload: false,
            plateForm: "",
            uniPlatform: "",
            pipStatus: false,
            videoHeight: "580rpx",
            settingData: {},
            config: {
                url: "",
                // 是否自动播放
                autoplay: true,
                //播放器预览背景图片，支持网络地址
                poster: "",
                //是否循环播放
                loop: false,
                //开始播放位置，单位：秒
                initialTime: 0,
                //是否是直播
                isLive: false,
                //是否静音播放
                muted: false,
                codec: "hardware",
                title: "",
                playStrategy: 0,

                cookieStr: "",
            },
            sourceList: [],
            selectMedia: {},
            selectType: {},
            tvList: [],
            showRehandleButton: false,
            direction: 0,
            showTvButton: false,
            seasonData: {},
        };
    },

    methods: {
        secondsTo100Nanoseconds(seconds) {
            // 参数验证
            if (typeof seconds !== 'number' || isNaN(seconds)) {
                throw new Error('输入必须是一个有效的数字');
            }
            if (seconds < 0) {
                throw new Error('输入不能为负数');
            }

            // 转换计算：秒数 × 10,000,000
            const result = seconds * 10000000;

            // 返回结果
            return result;
        },
        //判断选择的是webdav还是天翼云盘还是夸克
        judgeSelect() {
            this.sourceList = uni.getStorageSync("sourceList");
            this.selectType =
                this.sourceList.find((item) => {
                    let select = item.list.find((i) => i.active);
                    if (select) {
                        this.selectMedia = select;
                        return true;
                    } else {
                        return false;
                    }
                }) || {};
        },
        async getVideoUrl() {
            this.judgeSelect();
            if (this.selectType.type == 'Emby') {
                let res = await getEmbyPlayerUrl(
                    {
                        folderFileId: this.routerParams.folderFileId,
                    },
                    this.selectMedia
                );
                this.historyObj = {
                    ItemId: res.MediaSources[0].ItemId,
                    MediaSourceId: res.MediaSources[0].Id,
                    PlaySessionId: res.PlaySessionId,
                    initialTime: '0'
                }
                return res;
            }
        },
        setHistory(event) {
            if (this.routerParams.noSetHistory == 0) return;
            if (!this.routerParams.type) return;
            this.historyObj.initialTime = Math.round(event.detail.currentTime);
            this.historyObj.PositionTicks = Math.round(this.secondsTo100Nanoseconds(Number(event.detail.currentTime)))
        },
        //初始化进入的时候，设置从哪儿开始播放
        setInitialTime() {

        },
        reloadVideo() {
            this.showReload = false;
        },
        async setUrl() {
            let res = await this.getVideoUrl();
            this.config.url = res.MediaSources[0].Path;
            addOperLog({
                title: this.config.title.slice(0, 30),
                businessType: 10,
                operatorType: 2,
                operUrl: this.config.url,
            });
        },
        getPipStatus(event) {
            this.pipStatus = event.detail.isPip;
            if (this.pipStatus) {
                this.videoHeight = (event.detail.videoHeight / event.detail.videoWidth) * 750 + "rpx";
            } else {
                this.videoHeight = "580rpx";
            }
        },
        pauseVideo() {
            if (this.routerParams.noSetHistory != 0 && this.routerParams.type) {
                this.historyObj.PlaybackStartTimeTicks = secondsTo100Nanoseconds(Math.floor(Date.now() / 1000));
                setHistoryPlay(this.historyObj,this.selectMedia)
            }
        },
        prevVideo() {
            this.historyObj.initialTime = 0;
            this.tvList = uni.getStorageSync("tvList") || [];
            const lastIndex = decodeURIComponent(this.routerParams.path).lastIndexOf("/");
            let nowIndex = this.tvList.findIndex((item) => item.name == decodeURIComponent(this.routerParams.path).substring(lastIndex + 1)); //获取当前集在数组中的索引index
            this.changeVideo(nowIndex - 1);
        },
        nextVideo() {
            this.historyObj.initialTime = 0;
            this.tvList = uni.getStorageSync("tvList") || [];
            const lastIndex = decodeURIComponent(this.routerParams.path).lastIndexOf("/");
            let nowIndex = this.tvList.findIndex((item) => item.name == decodeURIComponent(this.routerParams.path).substring(lastIndex + 1)); //获取当前集在数组中的索引index
            this.changeVideo(nowIndex + 1);
        },
        async changeVideo(currentIndex) {
            let overviewData = uni.getStorageSync('overviewData')//emby 会在emby-detail设置overviewData，不需要去请求tmdb接口
            this.showTvButton = false;
            this.tvList = uni.getStorageSync("tvList") || [];
            // this.$refs.video_view.release();
            this.config.url = "";
            this.config.initialTime = this.routerParams.openingTime ? +this.routerParams.openingTime : 0;
            this.config.title = overviewData.title + " " + "第" + (currentIndex + 1) + "集 " + this.tvList[currentIndex].name;
            this.config.poster = this.tvList[currentIndex].poster;
            await this.setUrl();

        },
        getOrientation(event) {
            this.direction = event.detail.direction;
        },
        castTv() {
            this.$refs.tv_select.showPopup();
        },
        setTvButton(val) {
            if (val) {
                this.$refs.video_view.onPause();
            } else {
                this.$refs.video_view.onPlay();
                this.$refs.tv_select.stopVideo();
                this.$refs.selectUdn = "";
            }
            this.showTvButton = val;
        },
        playOrPauseVideo(val) {
            if (val) {
                this.$refs.video_view.onPlay();
            } else {
                this.$refs.video_view.onPause();
            }
        },
        async resetTv() {
            if (this.selectType.type == "WebDAV") {
                let res1 = await loginUser(this.selectMedia);
                this.selectMedia.token = res1.data.token;
                uni.setStorageSync("sourceList", this.sourceList);
                this.handleTv(this.routerParams);
                this.setUrl();
            } else {
                uni.showToast({
                    title: "请重新登录网盘",
                    icon: "none",
                });
            }
        },
        //播放到片尾时间跳转下一集
        arriveTimeNext() {
            if (this.historyObj.initialTime >= this.routerParams.endTime) {
                this.nextVideo();
            }
        },

        async handleTv(data) {

        },
    },
    async onLoad(options) {
        this.judgeSelect();
        let systemInfo = uni.getSystemInfoSync();
        this.plateForm = systemInfo.platform;
        this.uniPlatform = systemInfo.uniPlatform;
        this.settingData = uni.getStorageSync("settingData");
        if (this.uniPlatform != "app") {
            uni.showToast({
                title: "目前仅支持AAC格式音频和内嵌字幕，不支持EAC3格式音频和外挂字幕",
                duration: 3000,
                icon: "none",
            });
        }
        this.routerParams = options;
        this.seasonData = uni.getStorageSync("seasonData") || {};
        this.tvList = uni.getStorageSync("tvList") || [];
        if (options.type == 'tv') {
            this.config.title = this.tvList.find(i => i.id == options.folderFileId).name
        } else if (options.type == 'movie') {
            this.config.title = options.movieName
        }
        // if (this.routerParams.titlePlay) {
        //     this.handleTv(this.routerParams);
        // }
        // options.openingTime ? (this.config.initialTime = options.openingTime) : "";
        if (options.videoUrl) {
            this.config.url = decodeURIComponent(options.videoUrl);
            this.config.title = options.liveTitle;
            return;
        }
        this.setUrl();
    },
    onUnload() {
        let historyArr = uni.getStorageSync("historyPlay") || [];
        historyArr = historyArr.filter((v) => v.sourceType != this.selectType.type || v.sourceName != this.selectMedia.name);
        // console.log(this.historyPlay,'this.historyplay');
        uni.setStorageSync("historyPlay", [...historyArr, ...this.historyPlay]);
        uni.removeStorageSync("tvList");
        uni.removeStorageSync("seasonData");
        uni.removeStorageSync("overviewData");
    },
    onBackPress() {
        if (this.direction == 1) {
            this.$refs.video_view.toggleFullScreen();
            return true; // 阻止默认返回
        } else {
            if (this.$refs.tv_select.popupShow) {
                this.$refs.tv_select.hidePopup();
                return true;
            } else {
                return false;
            }
        }
    },
};
</script>

<style lang="scss">
page {
    flex: 1;
    display: flex;
    flex-direction: column;
    height: 100%;
    width: 100%;
}

.video-player {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    flex: 1;
    overflow: hidden;
    width: 750rpx;

    .video-player-container {
        background: #000000;
        width: 750rpx;

        .video-button {
            width: 200rpx;
            border-color: #00b2a0;
            height: 80rpx;
            background: #00b2a0;
            color: #ffffff;
            justify-content: center;
            align-items: center;
            display: flex;
            border-radius: 30rpx;
            line-height: 80rpx;
        }
    }
}
</style>