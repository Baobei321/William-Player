<template>
	<view class="video-player" style="width:100%;height:313px;background:#000">
		<video :src="config.url" :title="config.title" :autoplay="config.autoplay" :loop="config.loop"
			:initial-time="config.initialTime" :is-live="config.isLive" :muted="config.muted" :codec="config.codec"
			style="width:100%;height:313px" @timeupdate="setHistory" v-if="config.url" @error="error"
			@waiting="waiting">
		</video>
	</view>
</template>

<script>
	export default {
		data() {
			return {
				webdavInfo: {},
				historyPlay: [],
				historyObj: {
					initialTime: '0'
				},
				sum: 0,
				routerParams: {},
				rawUrl: '',
				timeout: null,
				emptyUrl: 'https://wxsnsdy.tc.qq.com/105/20210/snsdyvideodownload?filekey=30280201010421301f0201690402534804102ca905ce620b1241b726bc41dcff44e00204012882540400&bizid=1023&hy=SH&fileparam=302c020101042530230204136ffd93020457e3c4ff02024ef202031e8d7f02030f42400204045a320a0201000400',
				config: {
					url: "",
					// 是否自动播放
					autoplay: true,
					//播放器预览背景图片，支持网络地址
					poster: "",
					//是否循环播放
					loop: false,
					//开始播放位置，单位：秒
					initialTime: 0,
					//是否是直播
					isLive: false,
					//是否静音播放
					muted: false,
					codec: "hardware",
					title: "",
				},
			}
		},

		methods: {
			getVideoUrl() {
				this.webdavInfo = uni.getStorageSync('webdavInfo')
				return new Promise(resolve => {
					uni.request({
						url: 'http://' + this.webdavInfo.address + ':' + this.webdavInfo.port +
							'/api/fs/get',
						data: JSON.stringify({
							path: '/' + this.routerParams.path,
							password: ''
						}),
						timeout: 5000,
						method: 'POST',
						header: {
							Authorization: this.webdavInfo.token,
							'Content-Type': 'application/json'
						},
						success: (res) => {
							resolve(res.data)
						}
					})
				});
			},
			//裁剪格式获取电影名
			getMovieName(val) {
				const lastDotIndex = val.lastIndexOf('.');
				let name = lastDotIndex === -1 ? val : val.substring(0, lastDotIndex);
				return name
			},
			setHistory(event) {
				this.sum += 1
				if (this.sum == 5) {
					this.sum = 0
					this.historyObj.initialTime = String(Math.round(event.detail.currentTime))
					let index = null
					if (this.routerParams.type == 'tv') {
						index = this.historyPlay.findIndex(i => i.type == this.routerParams.type && i.titlePlay == this
							.historyObj.titlePlay)
					} else if (this.routerParams.type == 'movie') {
						index = this.historyPlay.findIndex(i => i.type == this.routerParams.type && getMovieName(i.name) ==
							getMovieName(this.historyObj.name))
					}
					if (index > -1) {
						this.historyPlay.splice(index, 1)
						this.historyPlay.unshift(this.historyObj)
					} else {
						this.historyPlay.unshift(this.historyObj)
					}
					uni.setStorageSync('historyPlay', this.historyPlay)
				}
				// if (this.timeout) {
				// 	clearTimeout(this.timeout)
				// 	this.timeout = null
				// }
			},
			//初始化进入的时候，设置从哪儿开始播放
			setInitialTime() {
				const lastIndex = this.routerParams.path.lastIndexOf('/')
				let obj = {}
				if (this.routerParams.type == 'movie') {
					let name = this.routerParams.path.substring(lastIndex + 1)
					obj = this.historyPlay?.find(i => i.name == name)
				} else if (this.routerParams.type == 'tv') {
					let name = this.routerParams.path.substring(lastIndex + 1)
					const secondLastSlashIndex = this.routerParams.path.lastIndexOf('/', lastIndex - 1);
					let titlePlay = this.routerParams.path.substring(secondLastSlashIndex + 1, lastIndex)
					obj = this.historyPlay?.find(i => i.name == name && i.titlePlay == titlePlay)
				}
				if (this.routerParams.item) {
					this.historyObj = JSON.parse(this.routerParams.item)
					this.config.poster = this.historyObj.poster
				} else {
					this.historyObj = obj
					this.config.poster = this.historyObj.poster
				}
				this.config.initialTime = Number(this.historyObj.initialTime)
				this.config.title = this.historyObj.titlePlay + ' ' + '第' + this.historyObj.ji + '集 ' + this.historyObj
					.title
			},
			error(e) {
        this.rawUrl = this.config.url
				this.config.url = ''
				setTimeout(() => {
					this.$nextTick(() => {
						this.config.url = this.rawUrl
					})
				}, 2000)
			},
			waiting(e) {
				// this.timeout = setTimeout(() => {
				// 	this.config.initialTime = 0
				// 	let url = this.config.url
				// 	this.config.url = ''
				// 	this.$nextTick(() => {
				// 		this.config.url = url
				// 	})
				// }, 10000)
			},
		},
		async onLoad(options) {
			this.historyPlay = uni.getStorageSync('historyPlay') || []
			this.routerParams = options
			this.setInitialTime()
			let res = await this.getVideoUrl()
			this.config.url = res.data.raw_url
			this.config.showVideo = true
		}
	}
</script>

<style lang="scss">
</style>