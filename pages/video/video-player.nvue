<template>
  <view class="video-player" style="width:750rpx">
    <wil-navbar title="视频播放" :showRightIcon="false" v-if="!pipStatus"></wil-navbar>
    <view class="video-player-container">
      <view :style="{width:'750rpx',height:videoHeight,background:'#000'}" v-if="plateForm=='android'&&uniPlatform=='app'">
        <video-view v-if="config.url" :initialTime="config.initialTime" :title="config.title" :src="config.url" @timeupdate="setHistory" @getpipstatus="getPipStatus"
          :style="{width:'750rpx',height:videoHeight}"></video-view>
      </view>
      <view v-else>
        <video :src="config.url" :title="config.title" :autoplay="config.autoplay" :loop="config.loop" :initial-time="config.initialTime" :is-live="config.isLive"
          :muted="config.muted" :codec="config.codec" :play-strategy="config.playStrategy" style="width:750rpx;height:650rpx" @timeupdate="setHistory"
          v-if="config.url&&!showReload">
        </video>
        <button class="video-button" v-if="showReload" @click="reloadVideo">
          <text style="color:#fff">重新加载</text>
        </button>
      </view>
    </view>
  </view>
</template>

<script>
import wilNavbar from "@/components/wil-navbar/navbar.nvue";
import { addOperLog } from "@/network/apis";
import { getWebDAVUrl, get189VideoUrl, getQuarkVideoUrl, getQuarkResolutionUrl } from "./components/common";
export default {
  components: {
    wilNavbar,
  },
  data() {
    return {
      webdavInfo: {},
      historyPlay: [],
      historyObj: {
        initialTime: "0",
      },
      sum: 0,
      routerParams: {},
      rawUrl: "",
      timeout: null,
      reloadTimeout: null,
      showReload: false,
      plateForm: "",
      uniPlatform: "",
      pipStatus: false,
      videoHeight: "650rpx",
      emptyUrl:
        "https://wxsnsdy.tc.qq.com/105/20210/snsdyvideodownload?filekey=30280201010421301f0201690402534804102ca905ce620b1241b726bc41dcff44e00204012882540400&bizid=1023&hy=SH&fileparam=302c020101042530230204136ffd93020457e3c4ff02024ef202031e8d7f02030f42400204045a320a0201000400",
      config: {
        url: "",
        // 是否自动播放
        autoplay: true,
        //播放器预览背景图片，支持网络地址
        poster: "",
        //是否循环播放
        loop: false,
        //开始播放位置，单位：秒
        initialTime: 0,
        //是否是直播
        isLive: false,
        //是否静音播放
        muted: false,
        codec: "hardware",
        title: "",
        playStrategy: 0,
        sourceList: [],
        selectMedia: {},
        selectType: {},
        cookieStr: "",
      },
    };
  },

  methods: {
    //判断选择的是webdav还是天翼云盘还是夸克
    judgeSelect() {
      this.sourceList = uni.getStorageSync("sourceList");
      this.selectType =
        this.sourceList.find((item) => {
          let select = item.list.find((i) => i.active);
          if (select) {
            this.selectMedia = select;
            return true;
          } else {
            return false;
          }
        }) || {};
    },
    async getVideoUrl() {
      this.judgeSelect();
      if (this.selectType.type == "WebDAV") {
        if (this.selectMedia.name) {
          let res = await getWebDAVUrl({ path: this.routerParams.path }, this.selectMedia);
          return res;
        }
      } else if (this.selectType.type == "天翼云盘") {
        if (this.selectMedia.name) {
          let res = await get189VideoUrl({ folderFileId: this.routerParams.folderFileId }, this.selectMedia);
          return res;
        }
      } else if (this.selectType.type == "夸克网盘") {
        if (this.selectMedia.name) {
          let res = await getQuarkResolutionUrl({ folderFileId: this.routerParams.folderFileId }, this.selectMedia);
          return res;
        }
      }
    },
    //裁剪格式获取电影名
    getMovieName(val) {
      const lastDotIndex = val.lastIndexOf(".");
      let name = lastDotIndex === -1 ? val : val.substring(0, lastDotIndex);
      return name;
    },
    setHistory(event) {
      if (this.routerParams.noSetHistory == 0) return;
      if (!this.routerParams.type) return;
      if (this.plateForm == "ios") {
        this.sum += 1;
        if (this.sum == 5) {
          this.sum = 0;
          this.historyObj.initialTime = Math.round(event.detail.currentTime);
          let index = null;
          if (this.routerParams.type == "tv") {
            index = this.historyPlay.findIndex((i) => i.type == this.routerParams.type && i.titlePlay == this.historyObj.titlePlay);
          } else if (this.routerParams.type == "movie") {
            index = this.historyPlay.findIndex((i) => i.type == this.routerParams.type && this.getMovieName(i.name) == this.getMovieName(this.historyObj.name));
          }
          if (index > -1) {
            this.historyPlay.splice(index, 1);
            this.historyPlay.unshift(this.historyObj);
          } else {
            if (this.historyObj.type) {
              this.historyPlay.unshift(this.historyObj);
            }
          }

          uni.setStorageSync("historyPlay", this.historyPlay);
        }
      } else if (this.plateForm == "android") {
        this.historyObj.initialTime = Math.round(event.detail.currentTime);
        let index = null;
        if (this.routerParams.type == "tv") {
          index = this.historyPlay.findIndex((i) => i.type == this.routerParams.type && i.titlePlay == this.historyObj.titlePlay);
        } else if (this.routerParams.type == "movie") {
          index = this.historyPlay.findIndex((i) => i.type == this.routerParams.type && this.getMovieName(i.name) == this.getMovieName(this.historyObj.name));
        }
        if (index > -1) {
          this.historyPlay.splice(index, 1);
          this.historyPlay.unshift(this.historyObj);
        } else {
          if (this.historyObj.type) {
            this.historyPlay.unshift(this.historyObj);
          }
        }
        uni.setStorageSync("historyPlay", this.historyPlay);
      }
    },
    //初始化进入的时候，设置从哪儿开始播放
    setInitialTime() {
      if (!this.routerParams.path) return;
      const lastIndex = this.routerParams.path.lastIndexOf("/");
      let obj = {};
      if (this.routerParams.type == "movie") {
        let name = this.routerParams.path.substring(lastIndex + 1);
        obj = this.historyPlay?.find((i) => i.name == name) || {};
      } else if (this.routerParams.type == "tv") {
        let name = this.routerParams.path.substring(lastIndex + 1);
        const secondLastSlashIndex = this.routerParams.path.lastIndexOf("/", lastIndex - 1);
        let titlePlay = this.routerParams.path.substring(secondLastSlashIndex + 1, lastIndex);
        obj = this.historyPlay?.find((i) => i.name == name && i.titlePlay == titlePlay) || {};
      }

      if (this.routerParams.item) {
        this.historyObj = JSON.parse(this.routerParams.item);
        this.config.poster = this.historyObj.poster;
      } else {
        if (this.routerParams.type) {
          this.historyObj = obj;
          this.config.poster = this.historyObj.poster;
        } else {
          this.config.initialTime = 0;
          this.config.title = this.routerParams.path.substring(lastIndex + 1);
          this.historyObj = {};
          return;
        }
      }
      this.config.initialTime = Number(this.historyObj.initialTime);
      if (this.routerParams.type == "movie") {
        this.config.title = this.getMovieName(this.historyObj.title);
      } else {
        if (this.historyObj.titlePlay) {
          this.config.title = this.historyObj.titlePlay + " " + "第" + this.historyObj.ji + "集 " + this.historyObj.title;
        } else {
          this.config.title = this.routerParams.path.substring(lastIndex + 1);
        }
      }
    },
    reloadVideo() {
      this.showReload = false;
    },
    getPipStatus(event) {
      this.pipStatus = event.detail.isPip;
      if (this.pipStatus) {
        this.videoHeight = (event.detail.videoHeight / event.detail.videoWidth) * 750 + "rpx";
      } else {
        this.videoHeight = "650rpx";
      }
    },
  },
  async onLoad(options) {
    let systemInfo = uni.getSystemInfoSync();
    this.plateForm = systemInfo.platform;
    this.uniPlatform = systemInfo.uniPlatform;
    if (this.uniPlatform != "app") {
      uni.showToast({
        title: "目前仅支持AAC格式音频和内嵌字幕，不支持EAC3格式音频和外挂字幕",
        duration: 3000,
        icon: "none",
      });
    }
    this.historyPlay = uni.getStorageSync("historyPlay") || [];
    this.routerParams = options;
    this.setInitialTime();
    if (options.videoUrl) {
      this.config.url = options.videoUrl;
      this.config.title = options.liveTitle
      return;
    }
    let res = await this.getVideoUrl();
    if (this.selectType.type == "WebDAV") {
      this.config.url = res.data.raw_url;
    } else if (this.selectType.type == "天翼云盘") {
      const NetworkModule = uni.requireNativePlugin("NetworkModule");
      NetworkModule.request(
        {
          url: res.normal.url,
          timeout: 5000,
          method: "GET",
        },
        (res1) => {
          this.config.url = res1.location;
        },
        (error) => {}
      );
    } else if (this.selectType.type == "夸克网盘") {
      if (res.data.video_list[0].video_info?.url) {
        this.config.url = res.data.video_list[0].video_info.url;
      } else {
        uni.showToast({
          title: "请使用88vip以上的夸克网盘",
          icon: "none",
        });
      }
    }
    addOperLog({ title: this.config.title, businessType: 10, operatorType: 2, operUrl: this.config.url });
  },
};
</script>

<style lang="scss">
.video-player {
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  flex: 1;
  .video-player-container {
    flex: 1;
    .video-button {
      width: 200rpx;
      bordercolor: #00b2a0;
      height: 80rpx;
      background: #00b2a0;
      color: #ffffff;
      justify-content: center;
      align-items: center;
      display: flex;
      border-radius: 30rpx;
      line-height: 80rpx;
    }
  }
}
</style>